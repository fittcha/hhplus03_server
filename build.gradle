plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group 'hhplus.architecture'
version '1.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('testcontainersVersion', "1.19.7")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.22.0'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'io.rest-assured:rest-assured:5.3.1'

    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:mysql" // mysql 컨테이너를 사용한다면 추가
    testImplementation "org.testcontainers:testcontainers:1.19.7"

    testImplementation 'com.h2database:h2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'jakarta.annotation:jakarta.annotation-api:2.0.0'

    // guava
    implementation 'com.google.guava:guava:33.0.0-jre'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
//    maxWarnings = 0 // 규칙이 어긋나는 코드가 하나라도 있을 경우 빌드 fail
    toolVersion = '10.15.0'
    configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = file("${buildDir}/JacocoTestReport")
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}

task testAndGenerateReport {
    group 'verification'
    description 'test w/ jacoco'

    dependsOn ':test', ':jacocoTestReport', ':jacocoTestCoverageVerification'

    tasks.jacocoTestReport.mustRunAfter tasks.test
    tasks.jacocoTestCoverageVerification.mustRunAfter tasks.jacocoTestReport
}

jar {
    enabled = false
}
