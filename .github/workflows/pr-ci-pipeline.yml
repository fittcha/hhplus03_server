name: CI develop

on:
  pull_request:
    branches: [ develop, release-* ]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/my-app-image:latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GCI_GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t IMAGE_NAME .
          docker push IMAGE_NAME

  test:
    needs: build-and-push-image
    env:
      PROFILE: test
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GCI_GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Pull Docker image
        run: docker pull IMAGE_NAME

      - name: Run Tests in Docker
        run: |
          docker run IMAGE_NAME /bin/sh -c "\
          ./gradlew test -Dspring.profiles.active=test jacocoTestReport && exit"

  lint:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GCI_GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Pull Docker image
        run: docker pull IMAGE_NAME

      - name: Lint in Docker
        run: |
          docker run IMAGE_NAME /bin/sh -c "\
          ./gradlew checkstyleMain checkstyleTest && exit"

  build:
    needs: [ test, lint ]
    env:
      PROFILE: dev
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GCI_GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin

      - name: Pull Docker image
        run: docker pull IMAGE_NAME

      - name: Build in Docker
        run: docker run IMAGE_NAME java -jar /app/app.jar

# GitHub Actions 워크플로우에서 자바 개발 환경을 설정하고, Gradle 빌드 시스템을 사용할 때 필요한 준비 과정
# 도커 컨테이너를 사용하지 않고 GitHub Actions 가상 환경에서 직접 실행할 경우
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: ${{ runner.os }}-gradle-
